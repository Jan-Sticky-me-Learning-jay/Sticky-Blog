{
  "version": 3,
  "sources": ["../../quill-image-drop-module/index.js"],
  "sourcesContent": ["/**\n * Custom module for quilljs to allow user to drag images from their file system into the editor\n * and paste images from clipboard (Works on Chrome, Firefox, Edge, not on Safari)\n * @see https://quilljs.com/blog/building-a-custom-module/\n */\nexport class ImageDrop {\n\n\t/**\n\t * Instantiate the module given a quill instance and any options\n\t * @param {Quill} quill\n\t * @param {Object} options\n\t */\n\tconstructor(quill, options = {}) {\n\t\t// save the quill reference\n\t\tthis.quill = quill;\n\t\t// bind handlers to this instance\n\t\tthis.handleDrop = this.handleDrop.bind(this);\n\t\tthis.handlePaste = this.handlePaste.bind(this);\n\t\t// listen for drop and paste events\n\t\tthis.quill.root.addEventListener('drop', this.handleDrop, false);\n\t\tthis.quill.root.addEventListener('paste', this.handlePaste, false);\n\t}\n\n\t/**\n\t * Handler for drop event to read dropped files from evt.dataTransfer\n\t * @param {Event} evt\n\t */\n\thandleDrop(evt) {\n\t\tevt.preventDefault();\n\t\tif (evt.dataTransfer && evt.dataTransfer.files && evt.dataTransfer.files.length) {\n\t\t\tif (document.caretRangeFromPoint) {\n\t\t\t\tconst selection = document.getSelection();\n\t\t\t\tconst range = document.caretRangeFromPoint(evt.clientX, evt.clientY);\n\t\t\t\tif (selection && range) {\n\t\t\t\t\tselection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.readFiles(evt.dataTransfer.files, this.insert.bind(this));\n\t\t}\n\t}\n\n\t/**\n\t * Handler for paste event to read pasted files from evt.clipboardData\n\t * @param {Event} evt\n\t */\n\thandlePaste(evt) {\n\t\tif (evt.clipboardData && evt.clipboardData.items && evt.clipboardData.items.length) {\n\t\t\tthis.readFiles(evt.clipboardData.items, dataUrl => {\n\t\t\t\tconst selection = this.quill.getSelection();\n\t\t\t\tif (selection) {\n\t\t\t\t\t// we must be in a browser that supports pasting (like Firefox)\n\t\t\t\t\t// so it has already been placed into the editor\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// otherwise we wait until after the paste when this.quill.getSelection()\n\t\t\t\t\t// will return a valid index\n\t\t\t\t\tsetTimeout(() => this.insert(dataUrl), 0);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Insert the image into the document at the current cursor position\n\t * @param {String} dataUrl  The base64-encoded image URI\n\t */\n\tinsert(dataUrl) {\n\t\tconst index = (this.quill.getSelection() || {}).index || this.quill.getLength();\n\t\tthis.quill.insertEmbed(index, 'image', dataUrl, 'user');\n\t}\n\n\t/**\n\t * Extract image URIs a list of files from evt.dataTransfer or evt.clipboardData\n\t * @param {File[]} files  One or more File objects\n\t * @param {Function} callback  A function to send each data URI to\n\t */\n\treadFiles(files, callback) {\n\t\t// check each file for an image\n\t\t[].forEach.call(files, file => {\n\t\t\tif (!file.type.match(/^image\\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\\.microsoft\\.icon)/i)) {\n\t\t\t\t// file is not an image\n\t\t\t\t// Note that some file formats such as psd start with image/* but are not readable\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set up file reader\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = (evt) => {\n\t\t\t\tcallback(evt.target.result);\n\t\t\t};\n\t\t\t// read the clipboard item or file\n\t\t\tconst blob = file.getAsFile ? file.getAsFile() : file;\n\t\t\tif (blob instanceof Blob) {\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t}\n\t\t});\n\t}\n\n}\n"],
  "mappings": ";;;AAKO,IAAM,YAAN,MAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOtB,YAAY,OAAO,UAAU,CAAC,GAAG;AAEhC,SAAK,QAAQ;AAEb,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAE7C,SAAK,MAAM,KAAK,iBAAiB,QAAQ,KAAK,YAAY,KAAK;AAC/D,SAAK,MAAM,KAAK,iBAAiB,SAAS,KAAK,aAAa,KAAK;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,KAAK;AACf,QAAI,eAAe;AACnB,QAAI,IAAI,gBAAgB,IAAI,aAAa,SAAS,IAAI,aAAa,MAAM,QAAQ;AAChF,UAAI,SAAS,qBAAqB;AACjC,cAAM,YAAY,SAAS,aAAa;AACxC,cAAM,QAAQ,SAAS,oBAAoB,IAAI,SAAS,IAAI,OAAO;AACnE,YAAI,aAAa,OAAO;AACvB,oBAAU,iBAAiB,MAAM,gBAAgB,MAAM,aAAa,MAAM,gBAAgB,MAAM,WAAW;AAAA,QAC5G;AAAA,MACD;AACA,WAAK,UAAU,IAAI,aAAa,OAAO,KAAK,OAAO,KAAK,IAAI,CAAC;AAAA,IAC9D;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,KAAK;AAChB,QAAI,IAAI,iBAAiB,IAAI,cAAc,SAAS,IAAI,cAAc,MAAM,QAAQ;AACnF,WAAK,UAAU,IAAI,cAAc,OAAO,aAAW;AAClD,cAAM,YAAY,KAAK,MAAM,aAAa;AAC1C,YAAI,WAAW;AAAA,QAGf,OACK;AAGJ,qBAAW,MAAM,KAAK,OAAO,OAAO,GAAG,CAAC;AAAA,QACzC;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,SAAS;AACf,UAAM,SAAS,KAAK,MAAM,aAAa,KAAK,CAAC,GAAG,SAAS,KAAK,MAAM,UAAU;AAC9E,SAAK,MAAM,YAAY,OAAO,SAAS,SAAS,MAAM;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,OAAO,UAAU;AAE1B,KAAC,EAAE,QAAQ,KAAK,OAAO,UAAQ;AAC9B,UAAI,CAAC,KAAK,KAAK,MAAM,8DAA8D,GAAG;AAGrF;AAAA,MACD;AAEA,YAAM,SAAS,IAAI,WAAW;AAC9B,aAAO,SAAS,CAAC,QAAQ;AACxB,iBAAS,IAAI,OAAO,MAAM;AAAA,MAC3B;AAEA,YAAM,OAAO,KAAK,YAAY,KAAK,UAAU,IAAI;AACjD,UAAI,gBAAgB,MAAM;AACzB,eAAO,cAAc,IAAI;AAAA,MAC1B;AAAA,IACD,CAAC;AAAA,EACF;AAED;",
  "names": []
}
